# SERVICIOS-MUNICIPALES/docker-compose.yml
# Configuración base ACTUALIZADA para el servidor (CON puerto DB expuesto a localhost)

version: '3.8' # Puedes quitar esta línea si quieres evitar el warning de obsoleto

services:
  # --- Servicio: Base de Datos (MySQL) ---
  db:
    image: mysql:8.0
    container_name: mysql_servicios_municipales
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${SM_DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${SM_DB_DATABASE}
      MYSQL_USER: ${SM_DB_USER}
      MYSQL_PASSWORD: ${SM_DB_PASSWORD}
    volumes:
      - mysql_servicios_data:/var/lib/mysql
    ports:
      # Exponer puerto de DB *SOLO* a localhost (127.0.0.1) en el host del servidor
      # Permite conectar desde el propio servidor (o vía túnel SSH)
      - "127.0.0.1:${SM_DB_PORT:-3306}:${SM_DB_PORT:-3306}" # Formato: "IP_HOST:PUERTO_HOST:PUERTO_CONTENEDOR"
    networks:
      # Conectado a la red interna del proyecto
      - servicios_municipales_net # Usa el nombre lógico definido abajo

  # --- Servicio: Backend (Node.js API) ---
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend_servicios_municipales
    restart: always
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${SM_BACKEND_INTERNAL_PORT}
      DB_HOST: db # Conecta a la BD usando el nombre del servicio
      DB_PORT: ${SM_DB_PORT} # Usa el puerto INTERNO de la BD
      DB_USER: ${SM_DB_USER}
      DB_PASSWORD: ${SM_DB_PASSWORD}
      DB_NAME: ${SM_DB_DATABASE}
      JWT_SECRET: ${SM_JWT_SECRET}
      JWT_EXPIRES_IN: ${SM_JWT_EXPIRES_IN}
      CLAVEUNICA_CLIENT_ID: ${SM_CLAVEUNICA_CLIENT_ID}
      CLAVEUNICA_CLIENT_SECRET: ${SM_CLAVEUNICA_CLIENT_SECRET}
      CLAVEUNICA_REDIRECT_URI: ${SM_CLAVEUNICA_REDIRECT_URI}
      CLAVEUNICA_AUTH_URL: ${SM_CLAVEUNICA_AUTH_URL}
      CLAVEUNICA_TOKEN_URL: ${SM_CLAVEUNICA_TOKEN_URL}
      CLAVEUNICA_USERINFO_URL: ${SM_CLAVEUNICA_USERINFO_URL}
      EMAIL_USER: ${SM_EMAIL_USER}
      EMAIL_PASS: ${SM_EMAIL_PASS}
      EMAIL_HOST: ${SM_EMAIL_HOST}
      EMAIL_PORT: ${SM_EMAIL_PORT}
      EMAIL_SECURE: ${SM_EMAIL_SECURE}
    depends_on:
      - db
    networks:
      # Conectado a la red interna para hablar con la BD
      - servicios_municipales_net # Usa el nombre lógico definido abajo
      # Conectado a la red externa para que Nginx/sgd_fe lo alcance
      - red_nginx_principal # Usa el nombre lógico definido abajo

  # --- Servicio: Frontend (Nginx sirviendo estáticos) ---
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        SM_REACT_APP_API_URL: ${SM_REACT_APP_API_URL:-/api}
    container_name: frontend_servicios_municipales
    restart: always
    networks:
      # Conectado a la red externa para que Nginx/sgd_fe lo alcance
      - red_nginx_principal # Usa el nombre lógico definido abajo

# --- Definición de Volúmenes Nombrados ---
volumes:
  mysql_servicios_data:
    name: mysql_servicios_data # Nombre explícito

# --- Definición de Redes ---
networks:
  # Red interna personalizada para este proyecto (backend <-> db)
  servicios_municipales_net: # Nombre lógico usado arriba
    name: ${SM_NETWORK_NAME:-servicios_municipales_net} # Nombre físico (del .env o default)
    driver: bridge

  # Red externa existente donde corre el Nginx principal (sgd_fe)
  red_nginx_principal: # Nombre lógico usado arriba
    external: true # Indica que Docker NO debe crearla, ya existe
    name: sgd_sgd_net # Nombre REAL de la red en el servidor